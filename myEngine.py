import numpy as np
#import seaborn as sns
from scipy import signal
import math
#import sys

from genericsynth import synthInterface as SI

'''
1. The drip texture is generated by a continuous frequency sweep from start frequency (cf) to a range (sweep) of frequency movement away from cf. <br>
2. The model is specified by four parameters, CF, sweep, decay, and decay variation <br>
3. CF is specified at the user level.
3. Three synthesizer specific parameters control the timbre of the drip sound: <br>
    3.1 Sweep : Range of frequencies traveresed for the frequency sweep.
    3.2 Decay : Controls the time after which the drip signal is attentuated.
    3.3 DecayVar : Variation on the center decay time <br>
4. A synthesizer loop runs through the parameter values for a specified duration to generate drip audio samples
'''

class MyEngine(SI.MySoundModel) :

        def __init__(self, cf=40, sweep=40, startAmp=0.5, ampRange=0.25) :
                SI. MySoundModel.__init__(self)
                #create a dictionary of the parameters this synth will use
                self.__addParam__("cf_exp", 20, 90, cf)
                self.__addParam__("sweep", 0, 40, sweep)

        '''
        Override of base model method
        Frequency sweeper for a drip sound
        A = sine wave amplitude
        sr = sample rate (Hz)
        cf = initial frequency (Hz)
        sweep = sweep range (Hz)
        startAmp = initial amplitude
        ampRange = Range of starting amplitude
        '''
        def generate(self, sigLenSecs):

                '''Interface level parameters'''
                # notation for this method
                cf=self.getParam("cf_exp")
                sweep =self.getParam("sweep")

                '''Synth variables'''
                width = 0.95 + 0.05*np.random.rand()
                phase = np.random.rand() * 2 * np.pi
                frequency = cf + math.floor(np.random.rand()*sweep)

                '''Synth level parameters'''
                cutOff = 0.05 + 0.15*np.random.random() # Duration of envelopes for DRIP
                # phase_increment = 2 * math.pi * start_Hz / 16000     # phase increment per sample
                numSamples = int(1 * 16000)        # 1 second * 16000 sample rate
                phase = 0
                phi = 0
                synth_output = []

                amp_env = SI.gesture(1, 0, cutOff,numSamples)
                # freq_sweep = SI.gesture(cf, cf+sweep, cutOff, numSamples)
                samples = np.linspace(0, 1, 16000)
                engineSawtooth = signal.sawtooth(2 * np.pi * frequency * samples + phase, width)

                return engineSawtooth

        ''' Print all the parameters and their ranges from the synth'''
        def printParams(self):
                paramVals = self.paramProps()
                for params in paramVals:
                        print( "Name: ", params.name, " Default value : ", params.val, " Max value ", params.max, " Min value ", params.min )
